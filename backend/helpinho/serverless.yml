org: mchiaridev
app: helpinho
service: helpinho

stages:
  default:
    params:
      usersTableName: "users-table-${sls:stage}"
      requestsTableName: "requests-table-${sls:stage}"
      helpsTableName: "helps-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
            - Fn::GetAtt: [RequestsTable, Arn]
            - Fn::Sub: "${RequestsTable.Arn}/index/UserIndex"
            - Fn::GetAtt: [HelpsTable, Arn]
            - Fn::Sub: "${HelpsTable.Arn}/index/RequestIndex"
  environment:
    USERS_TABLE: users-table-${sls:stage}
    REQUESTS_TABLE: requests-table-${sls:stage}
    HELPS_TABLE: helps-table-${sls:stage}


functions:
  users:
    handler: server.handler
    events:
      - http:
          path: users
          method: post
          description: Creates user
      - http:
          path: users/{userId}
          method: get
          description: Retrieves user
      - http:
          path: users/{userId}
          method: put
          description: Update user
      - http:
          path: users/{userId}
          method: delete
          description: Delete user

  requests:
    handler: server.handler
    events:
      - http:
          path: requests
          method: get
          description: Get all requests
      - http:
          path: requests/{requestId}
          method: get
          description: Get request by id
      - http:
          path: requests
          method: post
          description: Create request
      - http:
          path: requests/user/{userId}
          method: get
          description: Get requests by userId

  helps:
    handler: server.handler
    events:
      - http:
          path: helps/{requestId}
          method: get
          description: Get helps by requestId
      - http:
          path: helps
          method: post
          description: Create help

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users-table-${sls:stage}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    RequestsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: requests-table-${sls:stage}
        AttributeDefinitions:
          - AttributeName: requestId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: requestId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    HelpsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: helps-table-${sls:stage}
        AttributeDefinitions:
          - AttributeName: helpId
            AttributeType: S
          - AttributeName: requestId
            AttributeType: S
        KeySchema:
          - AttributeName: helpId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: RequestIndex
            KeySchema:
              - AttributeName: requestId
                KeyType: HASH
            Projection:
              ProjectionType: ALL