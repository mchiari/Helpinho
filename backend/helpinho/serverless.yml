org: mchiaridev
app: helpinho
service: helpinho

package:
  exclude:
    - node_modules/**

plugins:
    - serverless-lift

stages:
  default:
    params:
      usersTableName: "users-table-${sls:stage}"
      requestsTableName: "requests-table-${sls:stage}"
      helpsTableName: "helps-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - sns:*
            - sqs:*
          Resource: 
                - "*"

  environment:
    USERS_TABLE: ${param:usersTableName}
    REQUESTS_TABLE: ${param:requestsTableName}
    HELPS_TABLE: ${param:helpsTableName}
    REQUESTS_SNS_TOPIC_ARN: 
      Ref: RequestsTopic
    HELPS_SNS_TOPIC_ARN: 
      Ref: RequestsTopic
    # CREATE_REQUEST_QUEUE_URL: ${construct:createRequestQueue.queueUrl}
    # CREATE_HELP_QUEUE_URL: ${construct:createHelpQueue.queueUrl}

# lift plugin constructs
# constructs:
#   createRequestQueue:
#     type: queue
#     alarm: chiarimatheus@gmail.com
#     worker:
#       handler: worker.handler

#   createHelpQueue:
#     type: queue
#     worker:
#       handler: worker.handler

# lambda functions
functions:
  processor:
    handler: processor.handler
    events:
      - sqs:
          arn: 
            Fn::GetAtt:
              - RequestsQueue
              - Arn
          batchSize: 5

  dlqProcessor:
    handler: processor.handler
    events:
      - sqs:
          arn: 
            Fn::GetAtt:
              - RequestsQueue
              - Arn
          batchSize: 5

  users:
    handler: server.handler
    events:
      - http:
          path: users
          method: post
          description: Creates user
      - http:
          path: users/{userId}
          method: get
          description: Retrieves user
      - http:
          path: users/{userId}
          method: put
          description: Update user
      - http:
          path: users/{userId}
          method: delete
          description: Delete user

  requests:
    handler: server.handler
    events:
      - http:
          path: requests
          method: get
          description: Get all requests
      - http:
          path: requests/{requestId}
          method: get
          description: Get request by id
      - http:
          path: requests
          method: post
          description: Create request
      - http:
          path: requests/user/{userId}
          method: get
          description: Get requests by userId

  helps:
    handler: server.handler
    events:
      - http:
          path: helps/{requestId}
          method: get
          description: Get helps by requestId
      - http:
          path: helps
          method: post
          description: Create help

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:usersTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    RequestsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:requestsTableName}
        AttributeDefinitions:
          - AttributeName: requestId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: requestId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    HelpsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:helpsTableName}
        AttributeDefinitions:
          - AttributeName: helpId
            AttributeType: S
          - AttributeName: requestId
            AttributeType: S
        KeySchema:
          - AttributeName: helpId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: RequestIndex
            KeySchema:
              - AttributeName: requestId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    RequestsTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "RequestsTopic.fifo"
        FifoTopic: true
        ContentBasedDeduplication: true

    RequestsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "RequestsQueue.fifo"
        FifoQueue: true
        ContentBasedDeduplication: true
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - RequestsQueueDLQ
              - Arn
          maxReceiveCount: 3

    RequestsQueueDLQ:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "RequestsQueueDLQ.fifo"
        FifoQueue: true
        ContentBasedDeduplication: true

    RequestsQueueSubscription: 
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: 
          Fn::Join:
              - ':'
              - - 'arn:aws:sns'
                - Ref: 'AWS::Region'
                - Ref: 'AWS::AccountId'
                - 'RequestsTopic.fifo'
        Endpoint: 
          Fn::GetAtt:
          - RequestsQueue
          - Arn
        Protocol: sqs
        RawMessageDelivery: true

    SnsToRequestsQueueSQSPolicy:
      Type: "AWS::SQS::QueuePolicy"
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: "Allow"
              Principal:
                Service:
                  - "sns.amazonaws.com"
              Resource: 
                Fn::GetAtt:
                  - RequestsQueue
                  - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": 
                    Ref: RequestsTopic
        Queues:
          - Ref: RequestsQueue



    HelpsTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "HelpsTopic.fifo"
        FifoTopic: true
        ContentBasedDeduplication: true

    HelpsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "HelpsQueue.fifo"
        FifoQueue: true
        ContentBasedDeduplication: true
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - HelpsQueueDLQ
              - Arn
          maxReceiveCount: 3

    HelpsQueueDLQ:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "HelpsQueueDLQ.fifo"
        FifoQueue: true
        ContentBasedDeduplication: true

    HelpsQueueSubscription: 
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: 
          Fn::Join:
              - ':'
              - - 'arn:aws:sns'
                - Ref: 'AWS::Region'
                - Ref: 'AWS::AccountId'
                - 'HelpsTopic.fifo'
        Endpoint: 
          Fn::GetAtt:
          - HelpsQueue
          - Arn
        Protocol: sqs
        RawMessageDelivery: true

    SnsToHelpsQueueSQSPolicy:
      Type: "AWS::SQS::QueuePolicy"
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: "Allow"
              Principal:
                Service:
                  - "sns.amazonaws.com"
              Resource: 
                Fn::GetAtt:
                  - HelpsQueue
                  - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": 
                    Ref: HelpsTopic
        Queues:
          - Ref: HelpsQueue